{"version":3,"sources":["webpack:///./src/pages/setup/1.6.write_tests.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-setup-1-6-write-tests-mdx-6d5b427746626a3b1e3a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/vibranium/vibranium/src/components/Layout.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"writing-tests\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#writing-tests\",\n        \"aria-label\": \"writing tests permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Writing Tests`}</h1>\n    <p>{`Let's write our first few tests.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For the examples used in this page, let's assume that there's an app available that has a list of endpoints for creating, viewing and updating user data.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"creating-a-scenario\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#creating-a-scenario\",\n        \"aria-label\": \"creating a scenario permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Creating a scenario`}</h2>\n    <p>{`As mentioned earlier, a scenario refers to the JSON file in which we write tests. We can either create a JSON file inside a collection and fill in the fields, or, to make things easy, use ask Vibranium to create a scenario file for you, pre-filling all the essential data.`}</p>\n    <p>{`In order to create a new scenario, run the command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`vc c -c {collectionName} -s {scenarioName}\n`}</code></pre>\n    <p>{`Here `}<inlineCode parentName=\"p\">{`vc c`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`vc create`}</inlineCode>{` refers to the create command in Vibranium, and `}<inlineCode parentName=\"p\">{`{collectionName}`}</inlineCode>{` and  `}<inlineCode parentName=\"p\">{`{scenarioName}`}</inlineCode>{` refers to the collection name (directory/package name) and the scenario JSON file name respectively. Refer to `}<a parentName=\"p\" {...{\n        \"href\": \"../cli/2.3.vc_c.md\"\n      }}>{`Create command`}</a>{` for more details`}</p>\n    <p>{`Once you run this command, Vibranium will create a new scenario file and open it in your default JSON viewer. You can either delete the entries inside the `}<inlineCode parentName=\"p\">{`endpoints`}</inlineCode>{` key in the scenario of keep it for reference. For the examples below, we will create fresh tests, so it is recommended that you remove them.`}</p>\n    <h2 {...{\n      \"id\": \"write-your-first-test-case\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#write-your-first-test-case\",\n        \"aria-label\": \"write your first test case permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Write your first test case`}</h2>\n    <p>{`Let's start writing our first test.`}</p>\n    <p>{`Assume that we are writing a test for the endpoint `}<inlineCode parentName=\"p\">{`GET /api/v1/users`}</inlineCode>{`. The simplest test case that you can write is to check if the endpoint is up and running and returns status `}<inlineCode parentName=\"p\">{`200 OK`}</inlineCode>{` when called. For this, add the following JSON object into the endpoints array in the scenario:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"name\": \"get_all_users\",\n    \"description\": \"Endpoint to get all user details from the system\",\n    \"url\": \"/api/v1/users\"\n}\n`}</code></pre>\n    <p>{`The above mentioned JSON object will call the `}<inlineCode parentName=\"p\">{`/api/v1/users`}</inlineCode>{` using `}<inlineCode parentName=\"p\">{`GET`}</inlineCode>{` (if we don't specify any method, it takes GET as default) and checks whether the API returns a status of 200. Writing a basic test case is this simple!`}</p>\n    <p>{`Now say we want to validate more things, other than the status code. For this, we can use the `}<inlineCode parentName=\"p\">{`expect`}</inlineCode>{` key in the endpoint.\nFor example if we want to call the users list api to get all user details and validate if`}</p>\n    <ul>\n      <li parentName=\"ul\">{`API returns a status code of 200`}</li>\n      <li parentName=\"ul\">{`The Time to first byte should be less than 300ms `}</li>\n      <li parentName=\"ul\">{`The total time taken by API should be less than 700ms`}</li>\n      <li parentName=\"ul\">{`The response is of content type JSON`}</li>\n      <li parentName=\"ul\">{`Response should have at least one entry`}</li>\n      <li parentName=\"ul\">{`At least one user is admin`}</li>\n      <li parentName=\"ul\">{`All users have proper IDs`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"name\": \"get_all_users\",\n    \"description\": \"List all users\",\n    \"url\": \"/api/v1/users\",\n    \"method\": \"GET\",\n    \"expect\": {\n        \"status\": 200,\n        \"headers\": {\n            \"content-type\": \"application/json\"\n        },\n        \"response\": {\n            \"There should be atleast one entry\": \"{response.length} > 0\",\n            \"Atleast one user should be admin\": \"{response.all.isAdmin}.filter(isAdmin => isAdmin).length >= 1\",\n            \"All users have an ID of 32 characters\": \"{response.all.id}.every(id => id.length === 32)\"\n        },\n        \"timing\": {\n            \"total\": \"<700\",\n            \"firstByte\": \"<300\"\n        }\n    }\n}\n`}</code></pre>\n    <p>{`Was that a little too much? let's discuss it line by line.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Till the `}<inlineCode parentName=\"li\">{`expect`}</inlineCode>{` key, it is pretty much the same as the before example, so I'm leaving that part`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"status\": 200`}</inlineCode>{` tells Vibranium that the expected HTTP status code is 200 and to fail the test if we get a different value. By default it takes `}<inlineCode parentName=\"li\">{`200`}</inlineCode>{`, so even if you don't specify this line, the check is automatically handled`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"headers\": {...}`}</inlineCode>{` refers to checks related to the response headers. It is a key-value pair, with key referring to the repose header key and the value referring to the expected value for the key.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"content-type\": \"application/json\"`}</inlineCode>{` as mentioned in the previous point, this means that the expected value for the `}<inlineCode parentName=\"li\">{`content-type`}</inlineCode>{` header in the response is `}<inlineCode parentName=\"li\">{`application/json`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"response\": {...}`}</inlineCode>{` refers to checks related to the response body of the endpoint. This is also a key-value pair, with the key containing the test name/description and the value being simple JS snippets that does the check. There is a special response check when you specify the key as `}<inlineCode parentName=\"li\">{`schema`}</inlineCode>{`. We'll go through this later.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"There should be at least one entry\": \"{response.length} > 0\"`}</inlineCode>{` The key refers to the check description and the value contains a variable (any string enclosed in curly brackets '{' and '}'). `}<inlineCode parentName=\"li\">{`{response}`}</inlineCode>{` is a variable that contains the response body. We use dot notation to parse the object, so `}<inlineCode parentName=\"li\">{`{response.id}`}</inlineCode>{` means the `}<inlineCode parentName=\"li\">{`id`}</inlineCode>{` key inside the response. For more details, refer to `}<a parentName=\"li\" {...{\n          \"href\": \"../docs/3.3.variables.md\"\n        }}>{`Variables`}</a>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"Atleast one user should be admin\": \"{response.all.isAdmin}.filter(isAdmin => isAdmin).length >= 1\"`}</inlineCode>{` As mentioned in the previous point, we use dot notation here and `}<inlineCode parentName=\"li\">{`response`}</inlineCode>{` is a special variable with our response value in it. We have special keys like `}<inlineCode parentName=\"li\">{`all`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`any`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`any_n`}</inlineCode>{` etc about which we'll discuss in detailed later, but for now, it just means that we are taking all the entries in the array. For example, `}<inlineCode parentName=\"li\">{`{response.all.id}`}</inlineCode>{` is the same as `}<inlineCode parentName=\"li\">{`response.map(r => r.id)`}</inlineCode>{` in JavaScript. `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"All users have an ID of 32 characters\": \"{response.all.id}.every(id => id.length === 32)\"`}</inlineCode>{` If you have understood the previous point, this is very simple. `}<inlineCode parentName=\"li\">{`{response.all.id}`}</inlineCode>{` gives you an array of IDs and we are evaluating JS `}<inlineCode parentName=\"li\">{`every`}</inlineCode>{` function on the array to see if all the IDs have a length of 32.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"timing\": {...}`}</inlineCode>{` refers to the checks related to the response timing. You can specify a max value for the response timing and fail the test if it takes more than a certain amount of time. All timing values are in milliseconds. The available timing values that you can check are `}<inlineCode parentName=\"li\">{`total`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`firstByte`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`wait`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`dns`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`tcp`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`download`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"total\": \"<700\"`}</inlineCode>{` fail the test if the endpoint takes more than 700ms in total`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\"firstByte\": \"<300\"`}</inlineCode>{` fail the test if the endpoint takes more than 300ms for the first byte of the response`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`From this, we can understand that we can have a lot of of data/steps mentioned in a simple JSON object, and once you get to know the keys, any complex scenario can be very easy to understand, thanks to the simplicity of JSON and Vibranium`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"time-for-a-slightly-more-complex-test\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#time-for-a-slightly-more-complex-test\",\n        \"aria-label\": \"time for a slightly more complex test permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Time for a slightly more complex test.`}</h2>\n    <p>{`Let's write test to update the details for a particular user. The basic requirements of this test is that we first need to have a user in the system. There are two ways of proceeding with this. Either we can take an user from the users list api and update it, or create a new user and then update it. Since in many cases, there is no guarentee that the system has data already available, so we'll proceed by creating a new user. In most cases, we might already have the test for this, but for the sake of this example, let's say we already have a test as folllows in the scenarios:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"name\": \"create_a_user\",\n    \"url\": \"/api/v1/users\",\n    \"method\": \"POST\",\n    \"payload\": {\n        \"name\": \"My awesome username\"\n    }\n}\n`}</code></pre>\n    <p>{`Now we'll learn how to use this endpoint as a dependency in our update API test.`}</p>\n    <p>{`Here is the JSON for update user test. I'll go through the important parts of this example below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"name\": \"update_user_details\",\n    \"description\": \"Update user details\",\n    \"url\": \"/api/v1/users/{userId}\",\n    \"method\": \"PUT\",\n    \"variables\": {\n        \"newUserName\": \"{dataset.names}\"\n    },\n    \"payload\": {\n        \"name\": \"{newUserName}\"\n    },\n    \"dependencies\":[{\n        \"api\": \"create_a_user\",\n        \"variable\": {\n            \"userId\": \"response.id\",\n            \"oldUserName\": \"response.name\"\n        }\n    }]\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`All the keys till `}<inlineCode parentName=\"p\">{`variables`}</inlineCode>{` are self explanatory and so I'm skipping them`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`variables`}</inlineCode>{` is a key used to define variables in the test. Head over to `}<a parentName=\"p\" {...{\n            \"href\": \"../docs/3.3.variables.md\"\n          }}>{`Variables`}</a>{` if you need more details on this, but to explain in simple terms, it is just a key-value pair, with the key denoting the variable name and the value denoting the value for the variable.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`\"newUserName\": \"{dataset.names}\"`}</inlineCode>{` means that we are creating a new variable named `}<inlineCode parentName=\"p\">{`newUserName`}</inlineCode>{` with the value `}<inlineCode parentName=\"p\">{`{dataset.names}`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`dataset`}</inlineCode>{` is a special keyword in Vibranium, used to denote pre-defined data values. `}<inlineCode parentName=\"p\">{`{dataset.names}`}</inlineCode>{` means use any value from the inbuilt `}<inlineCode parentName=\"p\">{`names`}</inlineCode>{` dataset. More details on datasets is also available in the previously mentioned `}<a parentName=\"p\" {...{\n            \"href\": \"../docs/3.3.variables.md\"\n          }}>{`Variables`}</a>{` page.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`payload`}</inlineCode>{` key is used to denote the payload to be used in the endpoint. It can be of any type, depending on the endpoint. A payload can also be a string, starting with the `}<inlineCode parentName=\"p\">{`!`}</inlineCode>{` symbol to denote that the payload needs to be pulled from a file. So if the payload value is `}<inlineCode parentName=\"p\">{`!payloadForUpdateUser`}</inlineCode>{`, then the payload values is taken from the file named `}<inlineCode parentName=\"p\">{`payloadForUpdateUser.json`}</inlineCode>{` inside the `}<inlineCode parentName=\"p\">{`payloads`}</inlineCode>{` directory inside the tests directory.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`dependencies`}</inlineCode>{` key is used to denote the list of dependencies to be executed before executing the given endpoint. In this case, we need to run the create user api before running update user, and hence we define that api as a dependency. Head over to `}<a parentName=\"p\" {...{\n            \"href\": \"../docs/3.4.dependencies.md\"\n          }}>{`Dependencies`}</a>{` for more details of dependencies.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`\"api\": \"create_a_user\"`}</inlineCode>{` indicates that the api with the name `}<inlineCode parentName=\"p\">{`create_a_user`}</inlineCode>{` is a dependency for this endpoint. If the dependency is in the same scenario file, you just need to mention the api name, else if it in the same collection, we have to mention both api name and the scenario name and if the api is in a different collection, we need to specify api name, scenario and the collection. In this case, the endpoint is in the same file (as mentioned above) and so we define only the `}<inlineCode parentName=\"p\">{`api`}</inlineCode>{` key`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`variable`}</inlineCode>{` key denotes the variables that are to be pulled from the dependency response. So if we define `}<inlineCode parentName=\"p\">{`\"userId\": \"response.id\"`}</inlineCode>{`, it means that after the create endpoint is executed, the id field from the response is taken and assigned to the variable named userId, so that we can use that value in our endpoint.`}</p>\n      </li>\n    </ul>\n    <p>{`And now, let's add some assertions...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"name\": \"update_user_details\",\n    \"description\": \"Update user details\",\n    \"url\": \"/api/v1/users/{userId}\",\n    \"method\": \"PUT\",\n    \"variables\": {\n        \"newUserName\": \"{dataset.names}\"\n    },\n    \"payload\": \"!exampleCollection/updateUserPayload\",\n    \"dependencies\":[{\n        \"api\": \"create_a_user\",\n        \"variable\": {\n            \"userId\": \"response.id\",\n            \"oldUserName\": \"response.name\"\n        }\n    }],\n    \"expect\": {\n        \"status\": 200,\n        \"headers\": {\n            \"content-type\": \"application/json\"\n        },\n        \"response\": {\n            \"User ID is valid\": \"'{response.id}' === '{userId}'\",\n            \"User name should be same as input\": \"'{response.name}' === '{newUserName}'\",\n            \"schema\": \"!exampleCollection/updateUserResponseSchema\"\n        },\n        \"timing\": {\n            \"total\": \"<700\",\n            \"firstByte\": \"<300\"\n        }\n    }\n}\n`}</code></pre>\n    <p>{`Note that I have made changes to the payload key, and make it a file reference. So I'll have the corresponding payload file as `}<inlineCode parentName=\"p\">{`workspace/Vibranium-Tests-Directory/payloads/exampleCollection/updateUserPayload.json`}</inlineCode></p>\n    <p>{`Also, I have added a new key in `}<inlineCode parentName=\"p\">{`expect.response`}</inlineCode>{`, called `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{`. As mentioned before, it is a special key used to validate the response schema. If I place a JSON schema v6 based schema definition for the expected response and place it in `}<inlineCode parentName=\"p\">{`workspace/Vibranium-Tests-Directory/payloads/exampleCollection/updateUserResponseSchema.json`}</inlineCode>{`, Vibranium will use the schema file to validate the response and report the status.`}</p>\n    <p>{`Hopefully this was and informative Getting started guide. For more details on specific topics, please refer to the pages in documentation section.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"1.5.config_json.md\"\n      }}>{`Previous`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}