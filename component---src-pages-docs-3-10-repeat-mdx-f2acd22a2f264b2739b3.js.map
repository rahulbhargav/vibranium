{"version":3,"sources":["webpack:///./src/pages/docs/3.10.repeat.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,+BACN,MAAS,CACP,SAAY,aAEb,+BAAGC,WAAW,MAAS,CACtB,KAAQ,gCACR,aAAc,yCACd,UAAa,kBACZ,iCAAKA,WAAW,KAAQ,CACvB,cAAe,OACf,UAAa,QACb,OAAU,KACV,QAAW,MACX,QAAW,YACX,MAAS,OACR,kCAAMA,WAAW,OAAU,CAC1B,SAAY,UACZ,EAAK,qVAlBb,gCAoBA,8HAA6G,0BAAYA,WAAW,KAAvB,KAA7G,kEAA6N,0BAAYA,WAAW,KAAvB,UAA7N,mCACA,iBAAQ,CACN,GAAM,iBACN,MAAS,CACP,SAAY,aAEb,+BAAGA,WAAW,MAAS,CACtB,KAAQ,kBACR,aAAc,2BACd,UAAa,kBACZ,iCAAKA,WAAW,KAAQ,CACvB,cAAe,OACf,UAAa,QACb,OAAU,KACV,QAAW,MACX,QAAW,YACX,MAAS,OACR,kCAAMA,WAAW,OAAU,CAC1B,SAAY,UACZ,EAAK,qVAlBb,uBAoBA,qBAAG,sBAAQA,WAAW,KAAnB,UAAH,sDAAoG,sBAAQA,WAAW,KAAnB,KAApG,8PACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mGAQL,kGACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kGAQL,uCAAsB,0BAAYA,WAAW,KAAvB,gBAAtB,0DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uQAeL,kKACA,iBAAQ,CACN,GAAM,sBACN,MAAS,CACP,SAAY,aAEb,+BAAGA,WAAW,MAAS,CACtB,KAAQ,uBACR,aAAc,gCACd,UAAa,kBACZ,iCAAKA,WAAW,KAAQ,CACvB,cAAe,OACf,UAAa,QACb,OAAU,KACV,QAAW,MACX,QAAW,YACX,MAAS,OACR,kCAAMA,WAAW,OAAU,CAC1B,SAAY,UACZ,EAAK,qVAlBb,4BAoBA,qBAAG,sBAAQA,WAAW,KAAnB,gBAAH,qKAC0E,0BAAYA,WAAW,KAAvB,UAD1E,oJAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0JASL,kJACA,iBAAQ,CACN,GAAM,uBACN,MAAS,CACP,SAAY,aAEb,+BAAGA,WAAW,MAAS,CACtB,KAAQ,wBACR,aAAc,iCACd,UAAa,kBACZ,iCAAKA,WAAW,KAAQ,CACvB,cAAe,OACf,UAAa,QACb,OAAU,KACV,QAAW,MACX,QAAW,YACX,MAAS,OACR,kCAAMA,WAAW,OAAU,CAC1B,SAAY,UACZ,EAAK,qVAlBb,6BAoBA,qBAAG,sBAAQA,WAAW,KAAnB,gBAAH,uGAA2J,0BAAYA,WAAW,KAAvB,wBAA3J,oCAKJJ,EAAWK,gBAAiB","file":"component---src-pages-docs-3-10-repeat-mdx-f2acd22a2f264b2739b3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/vibranium/vibranium/src/components/Layout.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"repeating-endpoint-execution\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#repeating-endpoint-execution\",\n        \"aria-label\": \"repeating endpoint execution permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Repeating Endpoint Execution`}</h1>\n    <p>{`One of the important requirements in testing is to repeat the endpoint execution in a loop either for `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{` times or based on some condition. For such cases, we have the `}<inlineCode parentName=\"p\">{`repeat`}</inlineCode>{` and related keys in Vibranium.`}</p>\n    <h2 {...{\n      \"id\": \"repeat-integer\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#repeat-integer\",\n        \"aria-label\": \"repeat integer permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`repeat `}{`[integer]`}</h2>\n    <p><strong parentName=\"p\">{`repeat`}</strong>{` is used when you want the API execution to repeat `}<strong parentName=\"p\">{`n`}</strong>{` times. Whenever you add this key, the endpoint will be repeated for the mentioned amount of times and the response will be returned as an array of responses. To explain this in a simple way, let's say we have the endpoint test definition as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n    \"name\": \"api_name\",\n    \"url\": \"/api/v1/users/{userId}\",\n    // rest of the test\n}\n`}</code></pre>\n    <p>{`And let's say the expected response for this API is an object as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n    \"id\": \"some_unique_id\",\n    \"name\": \"User Name\",\n    // ... rest of the reponse\n}\n`}</code></pre>\n    <p>{`Now when I add `}<inlineCode parentName=\"p\">{`\"repeat\": 10`}</inlineCode>{` to the endpoint test definition, the response becomes`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`[\n    {\n        \"id\": \"some_unique_id1\",\n        \"name\": \"User Name 1\",\n        // ... rest of the reponse\n    }, {\n        \"id\": \"some_unique_id2\",\n        \"name\": \"User Name 2\",\n        // ... rest of the reponse\n    },\n    // 8 more objects\n]\n`}</code></pre>\n    <p>{`So when you use the response in some other API or in assertions, make sure you pick the value from the array instead of the actual object`}</p>\n    <h2 {...{\n      \"id\": \"repeat-until-object\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#repeat-until-object\",\n        \"aria-label\": \"repeat until object permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`repeat-until `}{`[object]`}</h2>\n    <p><strong parentName=\"p\">{`repeat-until`}</strong>{` is used whenever you want the endpoint execution to repeat based on some condition.\nThe value for this key is an object, that follows the same structure as the `}<inlineCode parentName=\"p\">{`expect`}</inlineCode>{` keyword. So if you want to repeat until the response status is 200 and till the status key in response is 'SUCCESS', then the syntax should be:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"repeat-until\": {\n    \"status\": 200,\n    \"response\": {\n        \"status should be 'SUCCESS'\": \"'{response.status}' === 'SUCCESS'\"\n    }\n}\n`}</code></pre>\n    <p>{`As mentioned above, the response will be in an array format, containing the response each time the endpoint was executed.`}</p>\n    <h2 {...{\n      \"id\": \"repeat-delay-integer\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#repeat-delay-integer\",\n        \"aria-label\": \"repeat delay integer permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`repeat-delay `}{`[integer]`}</h2>\n    <p><strong parentName=\"p\">{`repeat-delay`}</strong>{` is used to control the delay between each repetition. It is specified in milliseconds. For example `}<inlineCode parentName=\"p\">{`\"repeat-delay\": 5000`}</inlineCode>{` for repeating every 5 seconds.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}