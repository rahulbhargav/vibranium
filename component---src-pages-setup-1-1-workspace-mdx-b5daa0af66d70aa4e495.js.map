{"version":3,"sources":["webpack:///./src/pages/setup/1.1.workspace.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sBACN,MAAS,CACP,SAAY,aAEb,+BAAGC,WAAW,MAAS,CACtB,KAAQ,uBACR,aAAc,gCACd,UAAa,kBACZ,iCAAKA,WAAW,KAAQ,CACvB,cAAe,OACf,UAAa,QACb,OAAU,KACV,QAAW,MACX,QAAW,YACX,MAAS,OACR,kCAAMA,WAAW,OAAU,CAC1B,SAAY,UACZ,EAAK,qVAlBb,uBAoBA,+HACA,sRACA,oJACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,QAApB,qPAAmT,0BAAYA,WAAW,MAAvB,UAAnT,iEACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,QAApB,0IAAwM,+BAAGA,WAAW,MAAS,CAC3N,KAAQ,+BAD4L,yBAAxM,KAGA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,SAApB,iGAAgK,0BAAYA,WAAW,MAAvB,mBAAhK,OAAoO,0BAAYA,WAAW,MAAvB,SAApO,kGAAyX,0BAAYA,WAAW,MAAvB,mBAAzX,oLAA0mB,+BAAGA,WAAW,MAAS,CAC7nB,KAAQ,iDAD8lB,gBAA1mB,MAIF,+DAA8C,0BAAYA,WAAW,KAAvB,eAA9C,oCAA0I,0BAAYA,WAAW,KAAvB,mBAA1I,qDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,4NAkBL,qBAAG,+BAAGA,WAAW,KAAQ,CACrB,KAAQ,2CADT,UAOPJ,EAAWK,gBAAiB","file":"component---src-pages-setup-1-1-workspace-mdx-b5daa0af66d70aa4e495.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/vibranium/vibranium/src/components/Layout.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"vibranium-workspace\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#vibranium-workspace\",\n        \"aria-label\": \"vibranium workspace permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Vibranium Workspace`}</h1>\n    <p>{`In Vibranium, a workspace refers to the directory in your system where you'll have your tests written.`}</p>\n    <p>{`Irrespective of the directory you choose as your workspace, once Vibranium is installed and configured, you can run Vibranium commands from any directory. The setup process ensures that the path to the workspace is stored in the Vibranium configuration.`}</p>\n    <p>{`After you setup your workspace, you'll find a few directories available in it, namely jobs, logs and your tests directory. `}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Jobs`}</strong>{` directory stores the execution history for previous test executions. After each execution, there will be a new directory with name as the job number and the related files, including reports under it. There will be one extra directory, named `}<inlineCode parentName=\"li\">{`latest`}</inlineCode>{`, which will have the same contents as the last job executed.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Logs`}</strong>{`  directory is where all your logs will be stored. You can configure log rotation in the config file, about which you can refer in the `}<a parentName=\"li\" {...{\n          \"href\": \"setup/1.4.configuration.md\"\n        }}>{`configuration section`}</a>{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Tests`}</strong>{` directory is the directory where all the tests will be stored. This can be of any name, like `}<inlineCode parentName=\"li\">{`Vibranium-Tests`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`tests`}</inlineCode>{`. Whatever name you give to this directory, it should be updated in the config file, using the `}<inlineCode parentName=\"li\">{`tests_directory`}</inlineCode>{` key. If you already have some tests available and you are cloning them, this is will be the cloned directory. The directory structure inside this directory is explained in the `}<a parentName=\"li\" {...{\n          \"href\": \"setup/1.2.collections_scenarios_endpoints.md\"\n        }}>{`next section`}</a>{`.`}</li>\n    </ul>\n    <p>{`For example, if I have my workspace at `}<inlineCode parentName=\"p\">{`˜/workspace`}</inlineCode>{` and my tests directory is named `}<inlineCode parentName=\"p\">{`Vibranium-Tests`}</inlineCode>{`, then I'll have a directory structure as follows`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`˜/\n  workspace/\n    config.json\n    jobs/\n      latest/\n      job_1/\n      ...\n      job_n/\n    logs/\n    Vibranium-Tests/\n      scenarios/\n      payloads/\n      schemas/\n      templates/\n      docs/\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"1.2.collections_scenarios_endpoints.md\"\n      }}>{`Next`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}